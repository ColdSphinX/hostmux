#!/bin/sh

# Keybinding suggestions for .tmux.conf:
# bind-key a set-window-option synchronize-panes
# bind-key X kill-session


USAGE="hostmux [-h] [-x] [-l <tmux layout>] [-s <session name>] [-r <remote host>] HOST A [, HOST B, HOST N]"

# Default Settings
SESSION_NAME=hostmux
LAYOUT=even-vertical
CLOSE=

# Get optional user settings
while getopts :s:l:h:r:x:f opt
do
case $opt in
s)     SESSION_NAME=$OPTARG
       ;;
l)     LAYOUT=$OPTARG
       ;;
x)     CLOSE=" && exit"
       ;;
h)     echo $USAGE
       exit 1
       ;;
r)     RHOST=$OPTARG
       echo "Using remote host $OPTARG to connect"
       ;;
x)     CLOSE=" && exit"
       ;;
f)     HOSTS_FILE=$OPTARG
       ;;
'?')   echo "$0: invalid option -$OPTARG" >&2
       echo $USAGE >&2
       exit 1
       ;;
esac done
shift $((OPTIND - 1))

echo $#
echo $LAYOUT

# The actual script
NUMBER_OF_HOSTS=0
NUMBER_OF_HOST_ARGS=$#
HOSTS=()

# Add each remaining host argument to the HOSTS list
while [ $NUMBER_OF_HOSTS -lt $NUMBER_OF_HOST_ARGS ]
do
  NUMBER_OF_HOSTS=$(($NUMBER_OF_HOSTS+1))
  HOSTS[$NUMBER_OF_HOSTS]=$1
  shift
done

# add each line in the HOSTS_FILE to the HOSTS list
if [ -n "$HOSTS_FILE" ]
then
  echo "parsing hosts file $HOSTS_FILE"
  while read line
  do
    NUMBER_OF_HOSTS=$(($NUMBER_OF_HOSTS+1))
    HOSTS[$NUMBER_OF_HOSTS]=$line
  done < "$HOSTS_FILE"
fi

# Initialize Session
# If we are already in a tmux session just use the current window
if [ "$TERM" = "screen" -a -n "$TMUX" ]; then
  tmux rename-window $SESSION_NAME
else
  tmux -2 new-session -d -s $SESSION_NAME
fi

# Split as many times as we have hosts and reset
# the layout each time for even distribution
LOOP_INDEX=1

while [ $LOOP_INDEX -lt $NUMBER_OF_HOSTS ]
do
  tmux split-window -h -d
  tmux select-layout $LAYOUT

  LOOP_INDEX=$(($LOOP_INDEX+1))
done

# Check what pane-base-index is configured and use it for addressing
# the panes
PANE_INDEX=$(tmux show-window-options -g -v pane-base-index)
PANE_MAX=$(($PANE_INDEX+$NUMBER_OF_HOSTS-1))

# Loop through the panes and take the first argument as a ssh host
# then shift the argument list left, increase the index and go
# into next iteration. Now $1 refers to the next argument passed
# to the script
SSHPRE="ssh"
SSHPOST="$CLOSE"
if [ "x$RHOST" != "x" ]; then
  SSHPRE="$SSHPRE -t -A $RHOST \"ssh"
  SSHPOST="$SSHPOST\"$SSHPOST"
fi
for host in ${HOSTS[@]}
do
  tmux send-keys -t $PANE_INDEX "$SSHPRE $host$SSHPOST" C-m

  PANE_INDEX=$(($PANE_INDEX+1))
done


# Attach to the session
# But only if we are not already in a tmux session
if ! [ "$TERM" = "screen" -a -n "$TMUX" ]; then
  tmux -2 attach-session -t $SESSION_NAME
fi
